import json
import math
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from pathlib import Path
import statistics

class PerformanceAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    """
    
    def __init__(self, logs_dir: str = "./logs"):
        self.logs_dir = Path(logs_dir)
        self.trading_logger = None
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            from agents.utils.trading_logger import trading_logger
            self.trading_logger = trading_logger
        except ImportError:
            pass
    
    def analyze_daily_performance(self, date_str: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å
        
        Args:
            date_str: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        try:
            trades_file = self.logs_dir / f"trades_{date_str}.json"
            
            if not trades_file.exists():
                return {
                    "date": date_str,
                    "total_trades": 0,
                    "message": "No trades found for this date"
                }
            
            with open(trades_file, 'r') as f:
                trades = json.load(f)
            
            return self._calculate_performance_metrics(trades, date_str)
            
        except Exception as e:
            if self.trading_logger:
                self.trading_logger.log_error(e, f"analyze_daily_performance for {date_str}")
            return {
                "date": date_str,
                "error": str(e)
            }
    
    def analyze_period_performance(self, start_date: str, end_date: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥
        
        Args:
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ YYYY-MM-DD
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ YYYY-MM-DD
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        """
        try:
            start = datetime.strptime(start_date, "%Y-%m-%d")
            end = datetime.strptime(end_date, "%Y-%m-%d")
            
            all_trades = []
            current_date = start
            
            while current_date <= end:
                date_str = current_date.strftime("%Y-%m-%d")
                trades_file = self.logs_dir / f"trades_{date_str}.json"
                
                if trades_file.exists():
                    with open(trades_file, 'r') as f:
                        daily_trades = json.load(f)
                        all_trades.extend(daily_trades)
                
                current_date += timedelta(days=1)
            
            return self._calculate_performance_metrics(all_trades, f"{start_date} to {end_date}")
            
        except Exception as e:
            if self.trading_logger:
                self.trading_logger.log_error(e, f"analyze_period_performance {start_date} to {end_date}")
            return {
                "period": f"{start_date} to {end_date}",
                "error": str(e)
            }
    
    def _calculate_performance_metrics(self, trades: List[Dict], period_name: str) -> Dict[str, Any]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not trades:
            return {
                "period": period_name,
                "total_trades": 0,
                "message": "No trades found"
            }
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        executed_trades = [t for t in trades if t.get("type") == "execution"]
        
        if not executed_trades:
            return {
                "period": period_name,
                "total_trades": 0,
                "message": "No executed trades found"
            }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ PnL
        pnl_values = []
        trade_sizes = []
        winning_trades = 0
        losing_trades = 0
        
        for trade in executed_trades:
            trade_data = trade.get("data", {})
            pnl = trade_data.get("pnl", 0)
            size = trade_data.get("size", 0)
            
            if isinstance(pnl, (int, float)):
                pnl_values.append(pnl)
                trade_sizes.append(size)
                
                if pnl > 0:
                    winning_trades += 1
                elif pnl < 0:
                    losing_trades += 1
        
        if not pnl_values:
            return {
                "period": period_name,
                "total_trades": len(executed_trades),
                "message": "No valid PnL data found"
            }
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        total_trades = len(pnl_values)
        total_pnl = sum(pnl_values)
        win_rate = winning_trades / total_trades if total_trades > 0 else 0
        
        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        avg_pnl = statistics.mean(pnl_values)
        avg_trade_size = statistics.mean(trade_sizes) if trade_sizes else 0
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        pnl_volatility = statistics.stdev(pnl_values) if len(pnl_values) > 1 else 0
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        max_profit = max(pnl_values)
        max_loss = min(pnl_values)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if avg_trade_size > 0:
            avg_pnl_percentage = (avg_pnl / avg_trade_size) * 100
        else:
            avg_pnl_percentage = 0
        
        # Sharpe ratio (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        sharpe_ratio = 0
        if pnl_volatility > 0:
            sharpe_ratio = avg_pnl / pnl_volatility
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        max_drawdown = self._calculate_max_drawdown(pnl_values)
        
        # –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
        consistency_score = self._calculate_consistency_score(pnl_values)
        
        return {
            "period": period_name,
            "total_trades": total_trades,
            "total_pnl": round(total_pnl, 4),
            "winning_trades": winning_trades,
            "losing_trades": losing_trades,
            "win_rate": round(win_rate * 100, 2),
            "avg_pnl": round(avg_pnl, 4),
            "avg_trade_size": round(avg_trade_size, 4),
            "avg_pnl_percentage": round(avg_pnl_percentage, 2),
            "pnl_volatility": round(pnl_volatility, 4),
            "max_profit": round(max_profit, 4),
            "max_loss": round(max_loss, 4),
            "sharpe_ratio": round(sharpe_ratio, 4),
            "max_drawdown": round(max_drawdown, 4),
            "consistency_score": round(consistency_score, 2),
            "risk_metrics": {
                "profit_factor": abs(max_profit / max_loss) if max_loss != 0 else float('inf'),
                "risk_reward_ratio": abs(avg_pnl / pnl_volatility) if pnl_volatility > 0 else 0,
                "calmar_ratio": abs(avg_pnl / max_drawdown) if max_drawdown != 0 else 0
            }
        }
    
    def _calculate_max_drawdown(self, pnl_values: List[float]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É"""
        if not pnl_values:
            return 0
        
        peak = pnl_values[0]
        max_dd = 0
        
        for pnl in pnl_values:
            if pnl > peak:
                peak = pnl
            dd = peak - pnl
            if dd > max_dd:
                max_dd = dd
        
        return max_dd
    
    def _calculate_consistency_score(self, pnl_values: List[float]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        if len(pnl_values) < 2:
            return 100
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
        mean_pnl = statistics.mean(pnl_values)
        deviations = [abs(pnl - mean_pnl) for pnl in pnl_values]
        avg_deviation = statistics.mean(deviations)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ —à–∫–∞–ª–µ 0-100
        if avg_deviation == 0:
            return 100
        
        # –ú–µ–Ω—å—à–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = –≤—ã—à–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
        consistency = max(0, 100 - (avg_deviation * 10))
        return consistency
    
    def generate_performance_report(self, date_str: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        Args:
            date_str: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        
        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        metrics = self.analyze_daily_performance(date_str)
        
        if "error" in metrics or "message" in metrics:
            return f"üìä –û—Ç—á–µ—Ç –∑–∞ {date_str}\n\n{metrics.get('message', metrics.get('error', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'))}"
        
        report = f"""
üìä –û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
üìÖ –î–∞—Ç–∞: {date_str}

üéØ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {metrics['total_trades']}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {metrics['winning_trades']}
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: {metrics['losing_trades']}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö: {metrics['win_rate']}%

üí∞ PnL –ê–ù–ê–õ–ò–ó
‚Ä¢ –û–±—â–∏–π PnL: ${metrics['total_pnl']:.2f}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL: ${metrics['avg_pnl']:.2f}
‚Ä¢ –ú–∞–∫—Å. –ø—Ä–∏–±—ã–ª—å: ${metrics['max_profit']:.2f}
‚Ä¢ –ú–∞–∫—Å. —É–±—ã—Ç–æ–∫: ${metrics['max_loss']:.2f}

üìè –†–ê–ó–ú–ï–†–´ –ü–û–ó–ò–¶–ò–ô
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {metrics['avg_trade_size']:.1%}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL %: {metrics['avg_pnl_percentage']:.1f}%

üìà –†–ò–°–ö-–ú–ï–¢–†–ò–ö–ò
‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å PnL: ${metrics['pnl_volatility']:.4f}
‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {metrics['sharpe_ratio']:.4f}
‚Ä¢ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: ${metrics['max_drawdown']:.4f}
‚Ä¢ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {metrics['consistency_score']:.1f}/100

‚öñÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò
‚Ä¢ Profit Factor: {metrics['risk_metrics']['profit_factor']:.2f}
‚Ä¢ Risk/Reward: {metrics['risk_metrics']['risk_reward_ratio']:.2f}
‚Ä¢ Calmar Ratio: {metrics['risk_metrics']['calmar_ratio']:.2f}
        """
        
        return report.strip()
    
    def get_performance_summary(self, days: int = 7) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
        
        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–æ–π
        """
        try:
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days)
            
            start_str = start_date.strftime("%Y-%m-%d")
            end_str = end_date.strftime("%Y-%m-%d")
            
            return self.analyze_period_performance(start_str, end_str)
            
        except Exception as e:
            if self.trading_logger:
                self.trading_logger.log_error(e, f"get_performance_summary for {days} days")
            return {
                "error": str(e),
                "period": f"Last {days} days"
            }
    
    def export_performance_data(self, start_date: str, end_date: str, filename: str = None) -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ JSON —Ñ–∞–π–ª
        
        Args:
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            –ü—É—Ç—å –∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            if not filename:
                filename = f"performance_{start_date}_to_{end_date}.json"
            
            export_path = self.logs_dir / filename
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            performance_data = self.analyze_period_performance(start_date, end_date)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            export_data = {
                "export_info": {
                    "exported_at": datetime.now().isoformat(),
                    "period_start": start_date,
                    "period_end": end_date,
                    "version": "1.0"
                },
                "performance_metrics": performance_data
            }
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
            with open(export_path, 'w') as f:
                json.dump(export_data, f, indent=2)
            
            return str(export_path)
            
        except Exception as e:
            if self.trading_logger:
                self.trading_logger.log_error(e, f"export_performance_data {start_date} to {end_date}")
            raise

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
performance_analyzer = PerformanceAnalyzer()
