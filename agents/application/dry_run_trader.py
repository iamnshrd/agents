from agents.application.executor import Executor as Agent
from agents.polymarket.gamma import GammaMarketClient as Gamma
from agents.polymarket.polymarket import Polymarket
from agents.connectors.telegram import TelegramAlertsSync
from agents.utils.trading_config import trading_config
from agents.utils.portfolio import PortfolioManager
from agents.utils.market_dto import normalize_market
from agents.utils.metrics import trades_total, pnl_histogram

import shutil
import logging
from datetime import datetime
from typing import Dict, Any, List
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DryRunTrader:
    """
    –¢—Ä–µ–π–¥–µ—Ä –¥–ª—è —Ä–µ–∂–∏–º–∞ dry-run —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∞–ª–µ—Ä—Ç–æ–≤ –≤ Telegram
    """
    
    def __init__(self):
        self.polymarket = Polymarket()
        self.gamma = Gamma()
        self.agent = Agent()
        self.telegram = TelegramAlertsSync()
        # –ü–æ—Ä—Ç—Ñ–µ–ª—å dry-run
        try:
            initial_balance = float(trading_config.get_available_balance())
        except Exception:
            initial_balance = 100.0
        self.portfolio = PortfolioManager(initial_balance=initial_balance)
        self._market_title_cache: dict[str, tuple[str, float]] = {}
        try:
            from agents.utils.trading_config import trading_config as _tc
            self._title_ttl_secs = float(getattr(_tc, "market_title_ttl_seconds", 3600))
        except Exception:
            self._title_ttl_secs = 3600.0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.daily_stats = {
            "total_trades": 0,
            "total_pnl": 0.0,
            "winning_trades": 0,
            "losing_trades": 0,
            "start_time": datetime.now(),
            "positions": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º
        if not trading_config.is_dry_run():
            logger.warning(f"DryRunTrader initialized in {trading_config.trading_mode} mode. Use regular Trader for live trading.")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        logger.info(f"DryRunTrader initialized in {trading_config.trading_mode} mode")
        logger.info(f"Available balance (cfg): ${trading_config.get_available_balance():.2f}")
        logger.info(f"Portfolio balance (dry-run): ${self.portfolio.get_balance():.2f}")
        logger.info(f"Risk limits: {trading_config.get_risk_limits()}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        self._send_startup_notification()
    
    def _send_startup_notification(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        startup_message = f"""
üöÄ <b>BOT –ó–ê–ü–£–©–ï–ù</b>

üîß <b>–†–µ–∂–∏–º:</b> DRY RUN
üí∞ <b>–ë–∞–ª–∞–Ω—Å (–ø–æ—Ä—Ç—Ñ–µ–ª—å):</b> ${self.portfolio.get_balance():.2f}
üìä <b>–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:</b> {trading_config.max_position_size*100:.1f}%
‚ö†Ô∏è <b>–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É:</b> {trading_config.risk_per_trade*100:.1f}%

‚è∞ <b>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</b> {datetime.now().strftime('%H:%M:%S')}
        """
        
        try:
            self.telegram.send_trade_alert({
                "event_title": "Bot Startup",
                "market_question": "Trading bot initialized",
                "side": "INFO",
                "price": 0,
                "size": 0,
                "confidence": 1.0
            })
        except Exception as e:
            logger.error(f"Failed to send startup notification: {e}")
    
    def pre_trade_logic(self) -> None:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ"""
        self.clear_local_dbs()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if trading_config.should_stop_trading(self.daily_stats):
            logger.warning("Daily limits reached. Stopping trading.")
            self._send_risk_alert({
                "risk_level": "HIGH",
                "description": "Daily trading limits reached",
                "potential_loss": 0
            })
            return
    
    def clear_local_dbs(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            shutil.rmtree("local_db_events")
        except:
            pass
        try:
            shutil.rmtree("local_db_markets")
        except:
            pass
    
    def one_best_trade(self) -> None:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –ª—É—á—à—É—é —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ dry-run —Ä–µ–∂–∏–º–µ
        """
        try:
            self.pre_trade_logic()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            events = self.polymarket.get_all_tradeable_events()
            logger.info(f"1. FOUND {len(events)} EVENTS")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–æ —Ä—ã–Ω–∫–∞–º)
            if not events:
                logger.warning("No tradeable events returned from API; falling back to direct markets fetch")
                # Prefer CLOB sampling ‚Üí enrich via Gamma mapping inside helper
                markets = self.polymarket.get_sampling_simplified_markets()
                logger.info(f"3. FOUND {len(markets)} MARKETS (fallback: clob sampling)")
            else:
                filtered_events = self.agent.filter_events_with_rag(events)
                logger.info(f"2. FILTERED {len(filtered_events)} EVENTS")
                if not filtered_events:
                    logger.warning("No events matched filters; skipping trade")
                    return

                # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–∫–∏
                markets = self.agent.map_filtered_events_to_markets(filtered_events)
                logger.info(f"3. FOUND {len(markets)} MARKETS")
                if not markets:
                    logger.warning("No markets mapped from filtered events; skipping trade")
                    return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä—ã–Ω–∫–∏ (–±–µ–∑ RAG, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –ë–î)
            filtered_markets = self.agent.filter_markets_simple(markets)
            logger.info(f"4. FILTERED {len(filtered_markets)} MARKETS")
            
            if not filtered_markets:
                logger.warning("No suitable markets found for trading")
                return

            # Pareto-–∞–≥–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É; –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞ LLM/RAG –∫–∞–∫ –µ—Å—Ç—å
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä—ã–Ω–æ–∫
            market = filtered_markets[0]
            best_trade = self.agent.source_best_trade(market)
            logger.info(f"5. CALCULATED TRADE {best_trade}")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –æ–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–µ
            trade_data = self._prepare_trade_data(market, best_trade)
            # –ö–ª–∞–º–ø–∏–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ä–∏—Å–∫-–ª–∏–º–∏—Ç–∞–º
            max_size = float(trading_config.max_position_size)
            max_size = max(0.0, min(max_size, 1.0))
            size_val = float(trade_data.get("size", 0.0))
            clamped_size = max(0.0, min(size_val, max_size))
            trade_data["size"] = clamped_size
            # –†–∞—Å—á–µ—Ç –Ω–æ—Ç–∏–æ–Ω–∞–ª–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ dry-run –±–∞–ª–∞–Ω—Å–∞ (–¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏)
            pre_balance = float(self.portfolio.get_balance())
            trade_data["notional"] = round(pre_balance * clamped_size, 6)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∞–ª–µ—Ä—Ç (–¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏)
            trade_data["portfolio_balance_before"] = pre_balance
            trade_data["positions_count_before"] = len(self.portfolio.positions)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –æ —Å–¥–µ–ª–∫–µ
            self._send_trade_alert(trade_data)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–¥–µ–ª–∫—É –∫ –ø–æ—Ä—Ç—Ñ–µ–ª—é (—Å–ø–∏—à–µ—Ç –Ω–æ—Ç–∏–æ–Ω–∞–ª, –¥–æ–±–∞–≤–∏—Ç –ø–æ–∑–∏—Ü–∏—é)
            self.portfolio.apply_trade(trade_data)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            trade_result = self._simulate_trade_execution(trade_data)
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç-—Ñ–∞–∫—Ç—É–º –±–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è
            trade_result["portfolio_balance"] = float(self.portfolio.get_balance())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_trading_stats(trade_result)
            try:
                trades_total.labels(mode="dry_run").inc()
                pnl_histogram.observe(float(trade_result.get("pnl", 0.0)))
            except Exception:
                pass
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            self._send_position_alert(trade_result)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            logger.info(
                f"Portfolio after trade ‚Äî balance: ${self.portfolio.get_balance():.2f}, positions: {len(self.portfolio.positions)}"
            )
            
            logger.info(f"6. DRY RUN TRADE COMPLETED: {trade_result}")
            
        except Exception as e:
            logger.exception(f"Error in dry run trading: {e}")
            self._send_risk_alert({
                "risk_level": "HIGH",
                "description": f"Trading error: {str(e)}",
                "potential_loss": 0
            })
    
    def _prepare_trade_data(self, market: Any, best_trade: str) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–µ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–¥–µ–ª–∫–µ
            # –ü—Ä–∏–º–µ—Ä: "price:0.3, size:0.2, side: BUY"
            trade_parts = best_trade.replace("```", "").replace("`", "").strip().split(",")
            trade_data = {}
            
            for part in trade_parts:
                if ":" in part:
                    key, value = part.strip().split(":", 1)
                    k = key.strip().lower()
                    v = value.strip().strip("'\"")
                    if k == "side":
                        v = v.upper().replace("BUY", "BUY").replace("SELL", "SELL")
                    trade_data[k] = v
            
            # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä—ã–Ω–∫–µ
            event_title = "Unknown Event"
            market_question = "Unknown Question"
            market_id = "Unknown"
            market_url = ""
            try:
                doc = market[0] if isinstance(market, (list, tuple)) else market
                if hasattr(doc, "dict"):
                    md = doc.dict().get("metadata", {})
                    n = normalize_market(md)
                    market_question = n.get("question", market_question)
                    event_title = market_question or event_title
                    market_id = str(n.get("id", market_id))
                    tokens = n.get("clobTokenIds") or []
                    if tokens:
                        market_url = f"https://polymarket.com/market/{tokens[0]}"
                elif isinstance(doc, dict):
                    n = normalize_market(doc)
                    market_question = n.get("question", market_question)
                    event_title = market_question or event_title
                    market_id = str(n.get("id", market_id))
                    tokens = n.get("clobTokenIds") or []
                    if tokens:
                        market_url = f"https://polymarket.com/market/{tokens[0]}"
            except Exception:
                pass

            # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë Unknown, –ø—Ä–æ–±—É–µ–º –∫—ç—à/—Ä–µ—Ñ–µ—Ç—á –ø–æ id
            try:
                if (event_title == "Unknown Event" or market_question == "Unknown Question") and market_id and market_id != "Unknown":
                    import time
                    cached = self._market_title_cache.get(market_id)
                    now = time.time()
                    if cached:
                        title, ts = cached
                        if now - ts <= self._title_ttl_secs:
                            market_question = title
                            event_title = title
                        else:
                            cached = None
                    if not cached:
                        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å Gamma ‚Üí Polymarket –º–∞–ø–ø–∏–Ω–≥
                        detail = self.gamma.get_market(int(market_id))
                        mapped = self.polymarket.map_api_to_market(detail)
                        title = mapped.get("question", None) if isinstance(mapped, dict) else None
                        if title:
                            self._market_title_cache[market_id] = (title, now)
                            market_question = title
                            event_title = title
            except Exception:
                pass

            trade_data.update({
                "event_title": event_title,
                "market_question": market_question,
                "market_id": market_id,
                "market_url": market_url,
                "confidence": 0.7,  # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç AI –∞–≥–µ–Ω—Ç–∞
                "timestamp": datetime.now().isoformat()
            })
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã
            if "price" in trade_data:
                trade_data["price"] = float(trade_data["price"])
            if "size" in trade_data:
                trade_data["size"] = float(trade_data["size"])
            if "side" in trade_data:
                s = str(trade_data.get("side", "")).upper()
                trade_data["side"] = "BUY" if "BUY" in s else ("SELL" if "SELL" in s else "UNKNOWN")
            
            return trade_data
            
        except Exception as e:
            logger.error(f"Error preparing trade data: {e}")
            return {
                "event_title": "Unknown",
                "market_question": "Unknown",
                "side": "UNKNOWN",
                "price": 0,
                "size": 0,
                "confidence": 0
            }
    
    def _simulate_trade_execution(self, trade_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        # –í dry-run —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        import random
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏
        base_price = float(trade_data.get("price", 0.5))
        side = str(trade_data.get("side", "UNKNOWN")).upper()
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä—ã–Ω–∫–∞)
        price_change = random.uniform(-0.1, 0.1)  # ¬±10% –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
        new_price = max(0.01, min(0.99, base_price + price_change))
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
        position_value = float(trade_data.get("size", 0.0)) * float(trading_config.get_available_balance())
        pnl = position_value * price_change
        
        trade_result = {
            "event_title": trade_data.get("event_title", "Unknown"),
            "side": side,
            "entry_price": base_price,
            "exit_price": new_price,
            "size": trade_data.get("size", 0.0),
            "pnl": pnl,
            "price_change": price_change,
            "execution_time": datetime.now().isoformat(),
            "trade_id": f"dry_run_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        }
        
        return trade_result
    
    def _update_trading_stats(self, trade_result: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.daily_stats["total_trades"] += 1
        
        pnl = trade_result.get("pnl", 0)
        self.daily_stats["total_pnl"] += pnl
        
        if pnl > 0:
            self.daily_stats["winning_trades"] += 1
        elif pnl < 0:
            self.daily_stats["losing_trades"] += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å–ø–∏—Å–æ–∫
        self.daily_stats["positions"].append(trade_result)
        
        logger.info(f"Updated stats: {self.daily_stats}")
    
    def _send_trade_alert(self, trade_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –æ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        try:
            self.telegram.send_trade_alert(trade_data)
        except Exception as e:
            logger.error(f"Failed to send trade alert: {e}")
    
    def _send_position_alert(self, position_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –æ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            self.telegram.send_position_alert(position_data)
        except Exception as e:
            logger.error(f"Failed to send position alert: {e}")
    
    def _send_risk_alert(self, risk_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –æ —Ä–∏—Å–∫–∞—Ö"""
        try:
            self.telegram.send_risk_alert(risk_data)
        except Exception as e:
            logger.error(f"Failed to send risk alert: {e}")
    
    def get_daily_summary(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if self.daily_stats["total_trades"] == 0:
            return {"message": "No trades executed today"}
        
        win_rate = self.daily_stats["winning_trades"] / self.daily_stats["total_trades"]
        
        summary = {
            "total_trades": self.daily_stats["total_trades"],
            "total_pnl": self.daily_stats["total_pnl"],
            "winning_trades": self.daily_stats["winning_trades"],
            "losing_trades": self.daily_stats["losing_trades"],
            "win_rate": win_rate,
            "start_time": self.daily_stats["start_time"].isoformat(),
            "end_time": datetime.now().isoformat()
        }
        
        return summary
    
    def send_daily_summary(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –≤ Telegram"""
        try:
            summary = self.get_daily_summary()
            self.telegram.send_daily_summary(summary)
        except Exception as e:
            logger.error(f"Failed to send daily summary: {e}")
    
    def maintain_positions(self):
        """–ü—Ä–æ—Å—Ç–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ: —á–∞—Å—Ç–∏—á–Ω–æ/–ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º TP/SL."""
        try:
            positions = self.portfolio.get_positions()
            if not positions:
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å "—Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã":
            # –≤ —Ä–µ–∞–ª–µ ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å orderbook/mark price. –ó–¥–µ—Å—å ‚Äî –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é.
            import random
            for pos in list(positions):
                pos_id = pos.get("id")
                entry = float(pos.get("entry_price", 0.5))

                # –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ entry
                current = max(0.01, min(0.99, entry + random.uniform(-0.08, 0.08)))

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º SL/TP –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                tp = float(trading_config.take_profit_percentage)
                sl = float(trading_config.stop_loss_percentage)

                # –õ–∏–Ω–µ–π–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if pos.get("side") == "BUY":
                    change = (current - entry)
                else:
                    change = ((1.0 - current) - (1.0 - entry))

                # –¢—Ä–∏–≥–≥–µ—Ä–∏–º –∑–∞–∫—Ä—ã—Ç–∏–µ
                if change >= tp or change <= -sl:
                    closed = self.portfolio.close_position(pos_id, current)
                    if closed:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
                        closed_alert = {
                            "event_title": pos.get("event_title", "Unknown"),
                            "side": pos.get("side", "?"),
                            "entry_price": closed.get("entry_price", entry),
                            "exit_price": closed.get("exit_price", current),
                            "price_change": change,
                            "size": pos.get("size_fraction", 0),
                            "pnl": closed.get("realized_pnl", 0.0),
                            "market_url": pos.get("market_url", ""),
                            "portfolio_balance": float(self.portfolio.get_balance()),
                        }
                        self._send_position_alert(closed_alert)
                        logger.info(
                            f"Closed position {pos_id}: pnl=${closed_alert['pnl']:.2f}, balance=${self.portfolio.get_balance():.2f}"
                        )
        except Exception as e:
            logger.error(f"Error in maintain_positions: {e}")
    
    def incentive_farm(self):
        """–§–∞—Ä–º–∏–Ω–≥ —Å—Ç–∏–º—É–ª–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è dry-run)"""
        logger.info("Incentive farming not implemented in dry-run mode")
        pass

    def run_session(self, num_trades: int = 10, pause_secs: float = 2.0):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–¥–µ–ª–æ–∫ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏."""
        import time
        try:
            for i in range(num_trades):
                logger.info(f"[Session] Executing trade {i+1}/{num_trades}")
                self.one_best_trade()
                # –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏
                self.maintain_positions()
                if i < num_trades - 1:
                    time.sleep(pause_secs)
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
            self.send_daily_summary()
        except Exception as e:
            logger.error(f"Error in run_session: {e}")
            self.send_daily_summary()


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º dry-run —Ç—Ä–µ–π–¥–µ—Ä–∞
    trader = DryRunTrader()
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        trader.one_best_trade()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É
        trader.send_daily_summary()
        
    except KeyboardInterrupt:
        logger.info("Dry-run trading interrupted by user")
        trader.send_daily_summary()
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        trader.send_daily_summary()
